<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>3D Data Visualization Workshop</title><link>https://ida-mdc.github.io/workshop-visualization/</link><description>Recent content on 3D Data Visualization Workshop</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 09 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://ida-mdc.github.io/workshop-visualization/index.xml" rel="self" type="application/rss+xml"/><item><title>3D Data Visualization Workshop</title><link>https://ida-mdc.github.io/workshop-visualization/3d-data/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/3d-data/</guid><description>Introduction Hi, I&amp;rsquo;m Deborah, head of the Helmholtz Imaging Support Unit at MDC.
Helmholtz Imaging is here for you with Support Units at 3 centers, working in close collaboration with the Helmholtz Imaging Research Units. Members of all Helmholtz Imaging Support Units.
Introduction Consulting along the entire pipeline and across all research domains You can contact us with any question along the imaging pipeline. We are funded to support all Helmholtz centers in Germany, but you can also reach out to us if you don&amp;rsquo;t belong to Helmholtz.</description></item><item><title>Choosing colors for scientific 3D renderings</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-choosing-colors/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-choosing-colors/</guid><description>Color Representation in Digital Programs Colors in digital visualizations are represented using different models, such as HEX, RGB, and HSL. Digital programs might use different representations of colors - understanding how these models work can help you apply colors across tools. RGB color representation: rgb(255, 87,51) Red, Green, Blue values (0-255) Example: rgb(255, 87, 51) representing orange HEX color representation: #FF5733 Six-character code for RGB, encoded in hexadecimal two characters for each of the Red, Green, and Blue channels Example: #FF5733 represents orange, a color with maximum red (FF), moderate green (57), and low blue (33) HSL color representation: hsl(9, 100%, 60%) Hue (0-360 degrees), Saturation &amp;amp; Lightness (0-100%) Example: hsl(9, 100%, 60%) represents orange, with a hue of 9Â°, fully saturated, and 60% lightness Additive color mixing with Red, Green and Blue.</description></item><item><title>Converting Volumes to Meshes with VTK</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-conversion/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-conversion/</guid><description>Introduction In this tutorial, we will use VTK to convert 3D volumetric datasets (e.g., labelmaps, masks, and raw data) into 3D meshes. This process is particularly useful for creating surfaces that can be used in 3D visualizations, simulations, or exported to Blender for further processing. You will also learn how to optimize these meshes by decimating and smoothing them. VTK provides robust tools for generating meshes from volumes, including labelmaps and raw pixel data.</description></item><item><title>Cutting mesh structures in Blender</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-cutting-volumes-blender/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-cutting-volumes-blender/</guid><description>Introduction Cutting into mesh structures in Blender can be incredibly helpful for scientific visualization, especially when dealing with complex datasets. By cutting into an object, you can reveal internal structures that would otherwise remain hidden, providing deeper insights into the data.
For example, in our research, we visualized the structure of a beta cell from the following publication. We cut into the 3D volume, revealing important internal details that ended up getting featured on the cover of the journal.</description></item><item><title>How to install and use Album - a tool for decentralized software use case sharing</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-album-user/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-album-user/</guid><description>Why does Album exist? In science, commercial tools exist and can be very useful, but to push the boundaries of knowledge and stay ahead of new developments, scientists often rely on open-source tools and custom software. This results in scientists needing to figure out which tools solve their problems, how to install them, and how to use them, which leads to a diverse and sometimes confusing ecosystem. While there are IT solutions that help with unifying software use cases (like Docker or virtual environments), these tools are often challenging for non-computer experts due to their complexity and the risk of version conflicts.</description></item><item><title>Image Prevalidation</title><link>https://ida-mdc.github.io/workshop-visualization/album-solutions/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/album-solutions/</guid><description>Test sequenceDiagram participant Alice participant Bob Alice->>John: Hello John, how are you? loop Healthcheck John->>John: Fight against hypochondria end Note right of John: Rational thoughts prevail! John-->>Alice: Great! John->>Bob: How about you? Bob-->>John: Jolly good! Test 2 sudo apt install something</description></item><item><title>Rendering in Blender</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-rendering-blender/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-rendering-blender/</guid><description>Create a New Blender Scene To start, launch Blender and create a new scene to begin setting up your rendering environment. You can save this scene and reload it later with the same solution, preserving your work. Install Blender from the official website: https://www.blender.org/download/ Launch Blender and create a new scene. Blender Online Community. Blender - a 3D modelling and rendering package, Stichting Blender Foundation, Amsterdam. General Usage Import Mesh Files Blender allows you to import meshes, such as STL files, from previous steps in the workflow.</description></item><item><title>Rendering meshes in VTK</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-rendering-vtk/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-mesh-rendering-vtk/</guid><description>Introduction VTK is a powerful toolkit for rendering 3D meshes, and this tutorial focuses on using the provided solution for rendering scientific 3D datasets. We will explore not just how to run the solution, but also how the underlying Python code works, step by step. You will learn the foundational concepts of VTK while also understanding how to extend the code for your own datasets. Python based 3D visualization tool Supports various formats (STL, OBJ, PLY, .</description></item><item><title>Solutions</title><link>https://ida-mdc.github.io/workshop-visualization/solutions/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/solutions/</guid><description>List of solutions Catalog: default Run this command line to add the catalog to your local solutions collection:
album add-catalog https://gitlab.com/album-app/catalogs/default.git Fiji Macro template album:template-fiji-macro:0.1.0 An Album solution template run a macro script in Fiji. Tags: template, java, fiji, macro, maven Close solution Fiji Macro template album:template-fiji-macro:0.1.0 An Album solution template run a macro script in Fiji. Tags: template, java, fiji, macro, maven DOI: 10.5281/zenodo.6405812 License: unlicense Solution creator(s): Album team Usage: album install album:template-fiji-macro:0.</description></item><item><title>TODO</title><link>https://ida-mdc.github.io/workshop-visualization/todo/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/todo/</guid><description> General:
TODO make proper &amp;ldquo;how to run solution&amp;rdquo; page and link to it from solutions! After presentation:
TODO redeploy rest without defaults in channels TODO add impressum TODO make proper landing page TODO add comment thingy TODO add readme TODO add header</description></item><item><title>Volume rendering with BigDataViewer tools</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-volume-rendering-bdv/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-volume-rendering-bdv/</guid><description>Introduction BDV (BigDataViewer) is a powerful tool for visualizing large-scale 3D image data, particularly for biological datasets such as volumetric microscopy images. BDV allows for interactive exploration of massive image datasets using a hierarchical storage approach, which enables real-time rendering of very large volumes without overwhelming system memory. BDV is part of a broader family of tools, including BigVolumeViewer (BVV) for large volumetric datasets and SciView for interactive 3D rendering in scientific contexts.</description></item><item><title>Volumetric data rendering with Neuroglancer</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-volume-rendering-neuroglancer/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-volume-rendering-neuroglancer/</guid><description>Introduction Neuroglancer is a web-based tool for visualizing large-scale 3D datasets such as brain volumes, microscopy images, and annotations. Neuroglancer allows you to stream volumetric datasets for interactive exploration in the browser.
This showcase will demonstrate the process of preparing your data for Neuroglancer, streaming it locally or remotely, and working with the Neuroglancer interface to adjust views, add annotations, and share visualizations with collaborators.
Main Features: Voxel-based rendering: Efficiently visualize large 3D datasets by streaming the data directly into the browser.</description></item><item><title>Volumetric Dataset Rendering in Python</title><link>https://ida-mdc.github.io/workshop-visualization/tutorial-volume-rendering-python/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>https://ida-mdc.github.io/workshop-visualization/tutorial-volume-rendering-python/</guid><description>Volume Rendering in napari napari is a Python-based tool designed for interactive visualization of 2D/3D image data. It supports multi-channel volume rendering, making it a great option for smaller datasets that require quick exploration in 3D. napari also integrates well with the Python scientific stack, allowing users to run analysis code alongside the visualization. Interactive visualization and annotation: Offers tools for exploring data and annotating images in real-time. Layer-based rendering: Supports multiple layers like images, labels, points, and shapes for versatile data representation.</description></item></channel></rss>